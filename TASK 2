# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session


import matplotlib.pyplot as plt
import seaborn as sns

train=pd.read_csv('/kaggle/input/titanic/train.csv')
test=pd.read_csv('/kaggle/input/titanic/test.csv')

train.shape


train.head(2)


train.info()

test.info()

train.drop(columns=['Cabin'],inplace=True)
test.drop(columns=['Cabin'],inplace=True)

train.isnull().sum()

test.isnull().sum()

train['Embarked'].value_counts()

train['Embarked'].fillna('S',inplace=True)


train.isnull().sum()


test['Fare'].fillna(test['Fare'].mean(),inplace=True)


test.isnull().sum()


train_age=np.random.randint(train['Age'].mean()-train['Age'].std(),train['Age'].mean()+train['Age'].std(),177)


test_age=np.random.randint(test['Age'].mean()-test['Age'].std(),test['Age'].mean()+test['Age'].std(),86)


train['Age'][train['Age'].isnull()]=train_age


train.isnull().sum()


test['Age'][test['Age'].isnull()]=test_age


test.isnull().sum()


train.groupby(['Pclass'])['Survived'].mean()

train.groupby(['Sex'])['Survived'].mean()

train.groupby(['Embarked'])['Survived'].mean()


sns.distplot(train['Age'][train['Survived']==0])
sns.distplot(train['Age'][train['Survived']==1])

sns.distplot(train['Fare'][train['Survived']==0])
sns.distplot(train['Fare'][train['Survived']==1])

train.isnull().sum()

train.drop(columns=['Ticket'],inplace=True)
test.drop(columns=['Ticket'],inplace=True)

train['family']=train['SibSp']+train['Parch']+1

test['family']=test['SibSp']+test['Parch']+1

train['family'].value_counts()


train.groupby(['family'])['Survived'].mean()


def cal(number):
    if number==1:
        return 'Alone'
    elif number>1 and number<5:
        return 'Medium'
    else:
        return 'Large'

train['family_size']=train['family'].apply(cal)


train.head(2)


test['family_size']=test['family'].apply(cal)


train.drop(columns=['SibSp','Parch','family'],inplace=True)
test.drop(columns=['SibSp','Parch','family'],inplace=True)

passengerID=test['PassengerId'].values


train.drop(columns=['Name','PassengerId'],inplace=True)
test.drop(columns=['Name','PassengerId'],inplace=True)

train.isnull().sum()

train=pd.get_dummies(train,columns=['Pclass','Sex','Embarked','family_size'],drop_first=True)

train.shape


test=pd.get_dummies(test,columns=['Pclass','Sex','Embarked','family_size'],drop_first=True)

X=train.iloc[:,1:].values
y=train.iloc[:,0].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

from sklearn.ensemble import RandomForestClassifier

# Create a Random Forest Classifier
classifier = RandomForestClassifier(n_estimators=100, random_state=42)

classifier.fit(X_train,y_train)

y_pred=classifier.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)

xf=test.iloc[:,:].values

y_final=classifier.predict(xf)

final=pd.DataFrame()

final['passengerID']=passengerID


final['Survived']=y_final

final

final.to_csv('Submition.csv',index=False)


f=pd.read_csv('Submition.csv')

f


